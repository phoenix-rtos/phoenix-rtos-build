diff --git a/gcc/config/sparc/sparc.cc b/gcc/config/sparc/sparc.cc
--- a/gcc/config/sparc/sparc.cc
+++ b/gcc/config/sparc/sparc.cc
@@ -581,6 +581,8 @@ struct GTY(()) machine_function
   bool prologue_data_valid_p;
 };
 
+static unsigned int sparc_got_register;
+
 #define sparc_frame_size		cfun->machine->frame_size
 #define sparc_apparent_frame_size	cfun->machine->apparent_frame_size
 #define sparc_frame_base_reg		cfun->machine->frame_base_reg
@@ -2177,6 +2179,14 @@ sparc_option_override (void)
   if (!OPTION_SET_P (flag_ree) && TARGET_ARCH32)
     flag_ree = 0;
 
+  if (!sparc_pic_data_is_text_relative && !flag_pic)
+    warning (0, "-mno-pic-data-is-text-relative cannot be used without -fpic/-fPIC"); /* Warning instead of error to handle special case of strub.c disabling pic during libgcc build. */
+
+  if (sparc_pic_register_string != NULL)
+    {
+      sparc_got_register = decode_reg_name (sparc_pic_register_string);
+    }
+
   /* Do various machine dependent initializations.  */
   sparc_init_modes ();
 
@@ -2280,6 +2290,9 @@ can_use_mov_pic_label_ref (rtx label)
   if (flag_reorder_blocks_and_partition)
     return false;
 
+  if (!sparc_pic_data_is_text_relative)
+    return false;
+
   return true;
 }
 
@@ -4321,6 +4334,13 @@ load_got_register (void)
 {
   rtx insn;
 
+  if (!sparc_pic_data_is_text_relative) {
+    gcc_assert(flag_pic);
+    if (!got_register_rtx)
+  got_register_rtx = gen_rtx_REG (Pmode, sparc_got_register);
+    return;
+  }
+
   if (TARGET_VXWORKS_RTP)
     {
       if (!got_register_rtx)
diff --git a/gcc/config/sparc/sparc.h b/gcc/config/sparc/sparc.h
--- a/gcc/config/sparc/sparc.h
+++ b/gcc/config/sparc/sparc.h
@@ -791,6 +791,10 @@ along with GCC; see the file COPYING3.  If not see
 #define PIC_OFFSET_TABLE_REGNUM \
   (TARGET_VXWORKS_RTP && flag_pic ? GLOBAL_OFFSET_TABLE_REGNUM : INVALID_REGNUM)
 
+#ifndef TARGET_DEFAULT_PIC_DATA_IS_TEXT_RELATIVE
+#define TARGET_DEFAULT_PIC_DATA_IS_TEXT_RELATIVE 1
+#endif
+
 /* Pick a default value we can notice from override_options:
    !v9: Default is on.
    v9: Default is off.
diff --git a/gcc/config/sparc/sparc.opt b/gcc/config/sparc/sparc.opt
index afede3f40ce..c0ab020a4b6 100644
--- a/gcc/config/sparc/sparc.opt
+++ b/gcc/config/sparc/sparc.opt
@@ -324,3 +324,11 @@ Enum(sparc_memory_model) String(tso) Value(SMM_TSO)
 
 EnumValue
 Enum(sparc_memory_model) String(sc) Value(SMM_SC)
+
+mpic-data-is-text-relative
+Target Var(sparc_pic_data_is_text_relative) Init(TARGET_DEFAULT_PIC_DATA_IS_TEXT_RELATIVE)
+Assume data segments are relative to text segment.
+
+mpic-register=
+Target RejectNegative Joined Var(sparc_pic_register_string)
+Specify the register to be used for PIC addressing.
diff --git a/gcc/configure b/gcc/configure
--- a/gcc/configure
+++ b/gcc/configure
@@ -28698,11 +28698,11 @@ bar:
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_sparc_gotdata_op" >&5
 $as_echo "$gcc_cv_as_sparc_gotdata_op" >&6; }
-if test $gcc_cv_as_sparc_gotdata_op = yes; then
+# if test $gcc_cv_as_sparc_gotdata_op = yes; then
 
-$as_echo "#define HAVE_AS_SPARC_GOTDATA_OP 1" >>confdefs.h
+# $as_echo "#define HAVE_AS_SPARC_GOTDATA_OP 1" >>confdefs.h
 
-fi
+# fi
 
 
     { $as_echo "$as_me:${as_lineno-$LINENO}: checking assembler for unaligned pcrel relocs" >&5

