#
# Makefile for libphoenix
#
# ARMv7 (Cortex-M3/M4) options
#
# Copyright 2018, 2020 Phoenix Systems
#

CROSS ?= arm-phoenix-

CC := $(CROSS)gcc

# common Cortex-M CFLAGS
ifeq ($(DEBUG), 1)
  CFLAGS += -Og
else
  CFLAGS += -O2 -DNDEBUG #-DWATCHDOG
endif

CFLAGS += -Wall -Wstrict-prototypes -g
CFLAGS += -mthumb -fomit-frame-pointer -mno-unaligned-access
CFLAGS += -DNOMMU
CFLAGS += -fdata-sections -ffunction-sections

ifeq ($(TARGET_FAMILY), armv7m7)
  CFLAGS += -mcpu=cortex-m7 -mfloat-abi=hard -mfpu=fpv5-d16
else ifeq ($(TARGET_FAMILY), armv7m4)
  CFLAGS += -mcpu=cortex-m4 -fstack-usage
else ifeq ($(TARGET_FAMILY), armv7m3)
  CFLAGS += -mcpu=cortex-m3 -fstack-usage
endif

ifeq ($(TARGET_SUBFAMILY), stm32l152xd)
	RAM_SIZE=48
	VADDR_KERNEL_INIT=8000000
	KERNEL_TARGET_DEFINE=-DCPU_STM32L152XD -DNOMMU
else ifeq ($(TARGET_SUBFAMILY), stm32l152xe)
	RAM_SIZE=80
	VADDR_KERNEL_INIT=8000000
	KERNEL_TARGET_DEFINE=-DCPU_STM32L152XE -DNOMMU
else ifeq ($(TARGET_SUBFAMILY), stm32l4x6)
	RAM_SIZE=320
	VADDR_KERNEL_INIT=8000000
	KERNEL_TARGET_DEFINE=-DCPU_STM32L4X6 -DNOMMU
else ifeq ($(TARGET_SUBFAMILY), imxrt105x)
	VADDR_KERNEL_INIT=0
	KERNEL_TARGET_DEFINE=-DCPU_IMXRT105X -DNOMMU
else ifeq ($(TARGET_SUBFAMILY), imxrt106x)
	VADDR_KERNEL_INIT=0
	KERNEL_TARGET_DEFINE=-DCPU_IMXRT106X -DNOMMU
else ifeq ($(TARGET_SUBFAMILY), imxrt117x)
	VADDR_KERNEL_INIT=0
	KERNEL_TARGET_DEFINE=-DCPU_IMXRT117X -DNOMMU
else
	$(error Incorrect TARGET.)
endif


LDFLAGS := -z max-page-size=0x10 --gc-sections

ifeq ($(KERNEL), 1)
  CFLAGS += -DRAM_SIZE=$(RAM_SIZE) $(KERNEL_TARGET_DEFINE) -ffixed-r9
  LDFLAGS += -Tbss=20000000 -Tdata=20000000
else
  CFLAGS += -fpic -fpie -msingle-pic-base -mno-pic-data-is-text-relative
	# output .rel.* sections to make ELF position-independent
  LDFLAGS += -q
endif



AR = $(CROSS)ar
ARFLAGS = -r

LD = $(CROSS)ld

GCCLIB := $(shell $(CC) $(CFLAGS) -print-libgcc-file-name)
PHOENIXLIB := $(shell $(CC) $(CFLAGS) -print-file-name=libphoenix.a)
LDLIBS := $(PHOENIXLIB) $(GCCLIB)

OBJCOPY = $(CROSS)objcopy
OBJDUMP = $(CROSS)objdump

#TODO: provide --strip-unneeded only if it is necessary
STRIP = $(CROSS)strip
