#
# Common makefile for Phoenix-RTOS 3
#
# Copyright 2020 Phoenix Systems
#
# %LICENSE%
#

# set SIL to "" for verbose output
SIL ?= @

# function - returns the directory of the current Makefile
my-dir = $(dir $(lastword $(MAKEFILE_LIST)))
MAKES_PATH := $(abspath $(call my-dir))/makes

#
# setup basic variables
#
TARGET_FAMILY ?= $(firstword $(subst -, ,$(TARGET)-))
TARGET_SUBFAMILY ?= $(word 2,$(subst -, ,$(TARGET)-))

# reset env variables
CFLAGS :=          # flags related to C files compilation
CXXFLAGS :=        # flags related to C++ files compilation
CPPFLAGS :=        # flags for C preprocessor (C & C++)
LDFLAGS :=
LDFLAGS_PREFIX :=

# supported languages
LANGUAGE_EXTENSIONS := %.c %.cc %.cpp

# specific "-Ox" flag can be set globally for project by setting OLVL variable
ifneq ($(filter-out -O%,$(OLVL)),)
  $(error OLVL set but does not provide optimisation flags)
endif

ifneq ($(DEBUG), 1)
  CPPFLAGS += -DNDEBUG
  WATCHDOG ?= 1
else
  WATCHDOG ?= 0
endif

TOPDIR := $(CURDIR)
PREFIX_BUILD ?= ../_build/$(TARGET)
PREFIX_BUILD := $(abspath $(PREFIX_BUILD))
BUILD_DIR ?= $(PREFIX_BUILD)/$(notdir $(TOPDIR))
BUILD_DIR := $(abspath $(BUILD_DIR))

# build artifacts dir
CURR_SUFFIX := $(patsubst $(TOPDIR)/%,%,$(abspath $(CURDIR))/)
PREFIX_O := $(BUILD_DIR)/$(CURR_SUFFIX)

# target install paths, can be provided exterally
PREFIX_A ?= $(PREFIX_BUILD)/lib/
PREFIX_H ?= $(PREFIX_BUILD)/include/
PREFIX_PROG ?= $(PREFIX_BUILD)/prog/
PREFIX_PROG_STRIPPED ?= $(PREFIX_BUILD)/prog.stripped/
ALL_COMPONENTS :=

# default rootfs prefixes
PREFIX_FS ?= $(abspath $(CURDIR)/../_fs/$(TARGET))
PREFIX_ROOTFS ?= $(PREFIX_FS)/root/

# Check TARGET, set TARGET_SUFF and include target building options
include $(MAKES_PATH)/include-target.mk

# setup tools and sysroot
include $(MAKES_PATH)/setup-tools.mk
include $(MAKES_PATH)/setup-sysroot.mk

# add utility functions
include $(MAKES_PATH)/funcs.mk

# provide template files' paths to external makes
binary.mk := $(MAKES_PATH)/binary.mk
static-lib.mk := $(MAKES_PATH)/static-lib.mk

# default path for the programs to be installed in rootfs
DEFAULT_INSTALL_PATH := /bin

# do not clean and build in parallel
ifneq ($(filter %clean,$(MAKECMDGOALS)),)
$(info cleaning targets, make parallelism disabled)
.NOTPARALLEL:
endif

#
# generic *FLAGS options
#
# common include/lib paths
LDFLAGS += -L$(PREFIX_A)
ifneq ($(KERNEL), 1)
  CFLAGS += -I$(PREFIX_H)
  CXXFLAGS += -I$(PREFIX_H)
endif

# make PROJECT_PATH the first search dir to allow project customizations/monkey-patching
ifneq ($(PROJECT_PATH),)
  CFLAGS := -I$(PROJECT_PATH) $(CFLAGS)
  CXXFLAGS := -I$(PROJECT_PATH) $(CXXFLAGS)
endif

# remove local dev path from macros
CFLAGS += -fmacro-prefix-map=$(dir $(TOPDIR))=
CXXFLAGS += -fmacro-prefix-map=$(dir $(TOPDIR))=

# garbage-collect unused code/data
# NOTE: exported to ports also as it reduces binaries size greatly
CFLAGS += -ffunction-sections -fdata-sections
LDFLAGS_GC_SECTIONS ?= $(LDFLAGS_PREFIX)--gc-sections
LDFLAGS += $(LDFLAGS_GC_SECTIONS)
LDFLAGS_WHOLE_ARCHIVE_BEGIN ?= $(LDFLAGS_PREFIX)--whole-archive
LDFLAGS_WHOLE_ARCHIVE_END ?= $(LDFLAGS_PREFIX)--no-whole-archive

### right now we should have only target-necessary flags, save them for exporting (for building ports) ###
EXPORT_CFLAGS := $(CFLAGS)
EXPORT_CXXFLAGS := $(CXXFLAGS)
EXPORT_LDFLAGS := $(LDFLAGS)

# add our coding-style related options
CFLAGS += -Wall -Wstrict-prototypes
CXXFLAGS += -Wall

# always produce binaries with debug information
CFLAGS += -ggdb3
CXXFLAGS += -ggdb3

# set optimization level (target/project-dependant)
CFLAGS += $(OLVL)
CXXFLAGS += $(OLVL)

# Distribute the __TARGET and __CPU defines
CPPFLAGS += -D__TARGET_$(call uppercase,$(TARGET_FAMILY))
CPPFLAGS += -D__CPU_$(call uppercase,$(TARGET_SUBFAMILY))

ifneq ($(WATCHDOG), 0)
  CPPFLAGS += -DWATCHDOG
endif

#
# Generic rules
#
.PHONY: help export-cflags export-cxxflags export-ldflags

export-cflags:
	@echo $(EXPORT_CFLAGS)

export-cxxflags:
	@echo $(EXPORT_CXXFLAGS)

export-ldflags:
	@echo $(EXPORT_LDFLAGS)

help:
	$(info DEFAULT_COMPONENTS := $(DEFAULT_COMPONENTS))
	$(info ALL_COMPONENTS := $(ALL_COMPONENTS))
	@echo
	@echo "available generic make targets:"
	@echo "  all             build DEFAULT_COMPONENTS"
	@echo "  install         install DEFAULT_COMPONENTS into PREFIX_ROOTFS"
	@echo "  clean           clean ALL_COMPONENTS"
	@echo "  export-cflags   outputs contents of CFLAGS variable"
	@echo "  export-cxxflags outputs contents of CXXFLAGS variable"
	@echo "  export-ldflags  outputs contents of LDFLAGS variable"
	@echo
	@echo "available per-target make targets:"
	@echo "  <target>          build <target>"
	@echo "  <target>-install  install <target> into PREFIX_ROOTFS"
	@echo "  <target>-clean    clean <target>"
	@echo "  <target>-headers  install <target> headers into staging"


#
# Predefined and pattern rules
#


ARCH =  $(SIL)@mkdir -p $(@D); \
	printf "AR  %-24s\n" "$(@F)"; \
	$(AR) $(ARFLAGS) $@ $^ 2>/dev/null

# --whole-archive is needed for linker to always find constructors in .a files
LINK = $(SIL)mkdir -p $(@D); \
	printf "LD  %-24s\n" "$(@F)"; \
	$(LD) $(CFLAGS) $(LDFLAGS) -o "$@" $(LDFLAGS_WHOLE_ARCHIVE_BEGIN) $^ $(LDFLAGS_WHOLE_ARCHIVE_END) $(LDLIBS)


HEADER = $(SIL)mkdir -p $(@D); \
	printf "HEADER %-24s\n" "$<"; \
	cp -pR "$<" "$@"

INSTALL_FS = $(SIL)printf "INSTALL %s\n" "$(@:$(PREFIX_ROOTFS)%=%)"; \
	mkdir -p "$(@D)"; \
	cp -pR "$<" "$(@D)"

$(PREFIX_O)%.o: %.c
	@mkdir -p $(@D)
	@printf "CC  %-24s\n" "$<"
	$(SIL)$(CC) -c $(CPPFLAGS) $(CFLAGS) "$(abspath $<)" -o "$@" -MD -MP -MF $(PREFIX_O)$*.c.d -MT "$@"

$(PREFIX_O)%.o: %.cc
	@mkdir -p $(@D)
	@printf "CXX  %-24s\n" "$<"
	$(SIL)$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) "$(abspath $<)" -o "$@" -MD -MP -MF $(PREFIX_O)$*.cc.d -MT "$@"

$(PREFIX_O)%.o: %.cpp
	@mkdir -p $(@D)
	@printf "CXX  %-24s\n" "$<"
	$(SIL)$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) "$(abspath $<)" -o "$@" -MD -MP -MF $(PREFIX_O)$*.cpp.d -MT "$@"

$(PREFIX_O)%.o: %.S
	@mkdir -p $(@D)
	@printf "ASM %-24s\n" "$<"
	$(SIL)$(CC) -c $(CPPFLAGS) $(CFLAGS) "$(abspath $<)" -o "$@" -MD -MP -MF $(PREFIX_O)$*.S.d -MT "$@"

$(PREFIX_PROG_STRIPPED)%: $(PREFIX_PROG)%
	@mkdir -p $(@D)
	@printf "STR %-24s\n" "$(@F)"
	$(SIL)$(STRIP) -o $@ $<
